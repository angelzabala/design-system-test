@use '../design-entities/spacing/spacing' as *;
@use '../design-entities/colors/colors' as *;

@use '../design-entities/fonts/font-faces' as *;
@use '../design-entities/fonts/font_types' as *;
@use '../design-entities/fonts/fonts' as *;

@use './reverse-list-function' as *;
@use './fluid-type-function' as *;
@use './z-indexes' as *;
@use './shadows' as *;

@each $breakpoint, $breakpointMap in reverse($breakpoints) {
  @if (map-get($breakpointMap, value) != $smallestBreakpoint) {
    @media only screen and (min-width: map-get($breakpointMap, value)) {
      @each $fontType, $fontTypeMap in $fontTypes {
        .#{$breakpoint}-ft-#{$fontType} {
          font-family: map-get($fontTypeMap, family);
          font-size: map-get($fontTypeMap, max-size);
          letter-spacing: map-get($fontTypeMap, spacing);
          font-weight: map-get($fontTypeMap, weight);
          line-height: map-get($fontTypeMap, lineHeight);
        }
        .#{$breakpoint}-ft-#{$fontType}-c {
          font-size: map-get($fontTypeMap, min-size);
          font-size: fluidType(
            $min-vw,
            $max-vw,
            map-get($fontTypeMap, min-size),
            map-get($fontTypeMap, max-size)
          );
        }
      }

      @each $fontFamily, $value in $fontFamilies {
        .#{$breakpoint}-ff-#{$fontFamily} {
          font-family: '#{$value}';
        }
      }

      @each $fontSize, $value in $fontSizes {
        .#{$breakpoint}-fs-#{$fontSize} {
          font-size: #{$value};
        }
      }

      @each $letterSpacing, $value in $letterSpacings {
        .#{$breakpoint}-ls-#{$letterSpacing} {
          letter-spacing: #{$value};
        }
      }

      @each $fontStyle, $value in $fontStyles {
        .#{$breakpoint}-fst-#{$fontStyle} {
          font-style: '#{$value}';
        }
      }

      @each $fontWeight, $value in $fontWeights {
        .#{$breakpoint}-fw-#{$fontWeight} {
          font-weight: #{$value};
        }
      }

      @each $fontLineHeight, $value in $fontLineHeights {
        .#{$breakpoint}-lh-#{$fontLineHeight} {
          line-height: #{$value};
        }
      }
    }
  } @else {
    @each $fontType, $fontTypeMap in $fontTypes {
      .#{$breakpoint}-ft-#{$fontType} {
        font-family: map-get($fontTypeMap, family);
        font-size: map-get($fontTypeMap, max-size);
        letter-spacing: map-get($fontTypeMap, spacing);
        font-weight: map-get($fontTypeMap, weight);
        line-height: map-get($fontTypeMap, lineHeight);
      }
      .#{$breakpoint}-ft-#{$fontType}-c {
        font-size: map-get($fontTypeMap, min-size);
        font-size: fluidType(
          $min-vw,
          $max-vw,
          map-get($fontTypeMap, min-size),
          map-get($fontTypeMap, max-size)
        );
      }
    }

    @each $fontFamily, $value in $fontFamilies {
      .#{$breakpoint}-ff-#{$fontFamily} {
        font-family: '#{$value}';
      }
    }

    @each $fontSize, $value in $fontSizes {
      .#{$breakpoint}-fs-#{$fontSize} {
        font-size: #{$value};
      }
    }

    @each $letterSpacing, $value in $letterSpacings {
      .#{$breakpoint}-ls-#{$letterSpacing} {
        letter-spacing: #{$value};
      }
    }

    @each $fontStyle, $value in $fontStyles {
      .#{$breakpoint}-fst-#{$fontStyle} {
        font-style: '#{$value}';
      }
    }

    @each $fontWeight, $value in $fontWeights {
      .#{$breakpoint}-fw-#{$fontWeight} {
        font-weight: #{$value};
      }
    }

    @each $fontLineHeight, $value in $fontLineHeights {
      .#{$breakpoint}-lh-#{$fontLineHeight} {
        line-height: #{$value};
      }
    }
  }
}

@each $category, $categoryValues in $colorCategories {
  @each $type, $shades in $categoryValues {
    @each $shade, $value in $shades {
      @media (prefers-color-scheme: dark) {
        .clr-#{$category}-#{$type}-#{$shade}-darkmode {
          color: #{$value};
        }
        .bg-clr-#{$category}-#{$type}-#{$shade}-darkmode {
          background-color: #{$value};
        }
        .clr-#{$category}-#{$type}-#{$shade}-active-darkmode:active,
        .clr-#{$category}-#{$type}-#{$shade}-hover-darkmode:hover,
        .clr-#{$category}-#{$type}-#{$shade}-focus-darkmode:focus,
        .clr-#{$category}-#{$type}-#{$shade}-visited-darkmode:visited,
        .clr-#{$category}-#{$type}-#{$shade}-focus-within-darkmode,
        .clr-#{$category}-#{$type}-#{$shade}-focus-visible-darkmode:focus-visible,
        .clr-#{$category}-#{$type}-#{$shade}-target-darkmode:target {
          color: #{$value};
        }
        .bg-clr-#{$category}-#{$type}-#{$shade}-active-darkmode:active,
        .bg-clr-#{$category}-#{$type}-#{$shade}-hover-darkmode:hover,
        .bg-clr-#{$category}-#{$type}-#{$shade}-focus-darkmode:focus,
        .bg-clr-#{$category}-#{$type}-#{$shade}-visited-darkmode:visited,
        .bg-clr-#{$category}-#{$type}-#{$shade}-focus-within-darkmode:focus-within,
        .bg-clr-#{$category}-#{$type}-#{$shade}-focus-visible-darkmode:focus-visible,
        .bg-clr-#{$category}-#{$type}-#{$shade}-target-darkmode:target {
          background-color: #{$value};
        }
      }

      .clr-#{$category}-#{$type}-#{$shade} {
        color: #{$value};
      }
      .bg-clr-#{$category}-#{$type}-#{$shade} {
        background-color: #{$value};
      }
      .clr-#{$category}-#{$type}-#{$shade}-active:active,
      .clr-#{$category}-#{$type}-#{$shade}-hover:hover,
      .clr-#{$category}-#{$type}-#{$shade}-focus:focus,
      .clr-#{$category}-#{$type}-#{$shade}-visited:visited,
      .clr-#{$category}-#{$type}-#{$shade}-focus-within,
      .clr-#{$category}-#{$type}-#{$shade}-focus-visible:focus-visible,
      .clr-#{$category}-#{$type}-#{$shade}-target:target {
        color: #{$value};
      }
      .bg-clr-#{$category}-#{$type}-#{$shade}-active:active,
      .bg-clr-#{$category}-#{$type}-#{$shade}-hover:hover,
      .bg-clr-#{$category}-#{$type}-#{$shade}-focus:focus,
      .bg-clr-#{$category}-#{$type}-#{$shade}-visited:visited,
      .bg-clr-#{$category}-#{$type}-#{$shade}-focus-within,
      .bg-clr-#{$category}-#{$type}-#{$shade}-focus-visible:focus-visible,
      .bg-clr-#{$category}-#{$type}-#{$shade}-target:target {
        background-color: #{$value};
      }
    }
  }
}

@each $level, $value in $shadows {
  .shadow-#{$level} {
    box-shadow: #{$value};
  }
}

@each $level, $value in $z-indexes {
  .z-index-#{$level} {
    z-index: #{$value};
  }
}

/* Read only utility */
.sr-only {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  white-space: nowrap; /* added line */
  border: 0;
}
